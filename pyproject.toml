# =============================================================================
# Python Project Dependencies Configuration (pyproject.toml)
# =============================================================================
#
# PURPOSE:
# This file manages all Python package dependencies for this project using
# the modern PEP 621 standard. It replaces traditional requirements.txt files
# and provides a unified place for project metadata and dependencies.
#
# UPDATE STRATEGY:
# - Review and update dependencies monthly or when security vulnerabilities are found
# - Test all updates in a development environment before deploying to production
# - Use `pip install -e .` to install the project in editable mode with dependencies
# - Use `pip install -e .[dev]` to include development dependencies
# - Use `pip install -e .[test]` to include testing dependencies
# - Use `pip install -e .[dev,test]` to install multiple optional dependency groups
#
# VERSIONING STRATEGY GUIDE:
# ===========================
#
# == (Exact Pin):
#   Example: package==1.2.3
#   Use when: You need exact reproducibility (production deployments)
#   Pros: Maximum stability and reproducibility
#   Cons: No bug fixes or security updates automatically
#   Best for: Production dependencies after thorough testing
#
# ~= (Compatible Release):
#   Example: package~=1.2.3 (allows 1.2.4, 1.2.5 but NOT 1.3.0)
#   Use when: You want bug fixes but not feature changes
#   Pros: Automatic patch updates while maintaining compatibility
#   Cons: May still introduce unexpected behavior changes
#   Best for: Most production dependencies with good semver practices
#
# >= (Minimum Version):
#   Example: package>=1.2.3
#   Use when: You need features from a specific version but want flexibility
#   Pros: Maximum flexibility for resolving dependency conflicts
#   Cons: May introduce breaking changes from major updates
#   Best for: Development tools, or when combined with upper bounds (>=1.2,<2.0)
#
# < or <= (Maximum Version):
#   Example: package>=1.2.0,<2.0.0
#   Use when: You know a major version will break compatibility
#   Pros: Prevents known incompatible versions
#   Cons: Requires active maintenance to update bounds
#   Best for: Libraries with known breaking changes in major versions
#
# TRANSITIVE DEPENDENCIES:
# ========================
# Transitive dependencies are packages that your direct dependencies require.
# Generally, you should NOT list them explicitly unless:
# 1. You directly import/use them in your code
# 2. You need a specific version to fix a bug or security issue
# 3. There's a known conflict that needs resolution
#
# To view all transitive dependencies: `pip list` or `pip freeze`
# To see dependency tree: `pip install pipdeptree && pipdeptree`
#
# =============================================================================

[build-system]
# Defines how to build this project (required for PEP 621)
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
# Basic project metadata
name = "python-project"  # Replace with your actual project name
version = "0.1.0"
description = "A Python project with dependency management"
readme = "README.md"
requires-python = ">=3.8"  # Minimum Python version required
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
license = {text = "MIT"}  # Adjust based on your project license

# Keywords for package discovery (if publishing to PyPI)
keywords = ["python", "example"]

# Classifiers help users find your project (if publishing to PyPI)
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# =============================================================================
# PRODUCTION DEPENDENCIES
# =============================================================================
# These are the core packages required to run the application in production.
# Use conservative versioning (== or ~=) for production stability.
#
dependencies = [
    # Example entries (uncomment and modify as needed):
    #
    # Web frameworks:
    # "flask~=2.3.0",           # Use ~= for web frameworks to get security patches
    # "django~=4.2.0",          # Compatible release allows patch updates (4.2.x)
    # "fastapi>=0.100.0,<1.0",  # Range constraint for newer projects
    #
    # Data processing:
    # "pandas~=2.0.0",          # Data analysis library
    # "numpy>=1.24.0,<2.0",     # Numerical computing (with upper bound)
    #
    # Database:
    # "sqlalchemy~=2.0.0",      # ORM/database toolkit
    # "psycopg2-binary~=2.9.0", # PostgreSQL adapter
    #
    # HTTP clients:
    # "requests~=2.31.0",       # HTTP library
    # "httpx~=0.24.0",          # Modern async HTTP client
    #
    # Configuration:
    # "python-dotenv~=1.0.0",   # Load environment variables from .env
    # "pyyaml~=6.0",            # YAML parser
]

# =============================================================================
# OPTIONAL DEPENDENCY GROUPS
# =============================================================================
# These are organized into groups that can be installed selectively.
# Install with: pip install -e .[group-name]
# Install multiple: pip install -e .[dev,test]

[project.optional-dependencies]

# -----------------------------------------------------------------------------
# DEVELOPMENT DEPENDENCIES
# -----------------------------------------------------------------------------
# Tools used during development but not needed in production.
# Can use more relaxed versioning (>=) since this is local environment.
#
dev = [
    # Code formatting:
    # "black>=23.0.0",          # Opinionated code formatter
    # "isort>=5.12.0",          # Import statement organizer
    #
    # Code quality:
    # "pylint>=2.17.0",         # Comprehensive linting
    # "flake8>=6.0.0",          # Style guide enforcement
    # "mypy>=1.4.0",            # Static type checker
    #
    # Development tools:
    # "ipython>=8.12.0",        # Enhanced interactive Python shell
    # "ipdb>=0.13.0",           # IPython debugger
    #
    # Documentation:
    # "sphinx>=7.0.0",          # Documentation generator
    # "sphinx-rtd-theme>=1.2.0", # Read the Docs theme for Sphinx
]

# -----------------------------------------------------------------------------
# TESTING DEPENDENCIES
# -----------------------------------------------------------------------------
# Packages required to run the test suite.
# Use ~= for test frameworks to ensure compatibility with test code.
#
test = [
    # Testing frameworks:
    # "pytest~=7.4.0",          # Primary testing framework
    # "pytest-cov~=4.1.0",      # Coverage plugin for pytest
    # "pytest-mock~=3.11.0",    # Mocking plugin for pytest
    # "pytest-asyncio~=0.21.0", # Async test support
    #
    # Test utilities:
    # "coverage[toml]~=7.2.0",  # Code coverage measurement
    # "hypothesis~=6.82.0",     # Property-based testing
    # "faker~=19.0.0",          # Generate fake test data
    #
    # HTTP testing:
    # "responses~=0.23.0",      # Mock responses library
    # "httpretty~=1.1.0",       # HTTP request mocker
]

# -----------------------------------------------------------------------------
# BUILD DEPENDENCIES
# -----------------------------------------------------------------------------
# Tools needed for building and packaging the project.
#
build = [
    # "build>=0.10.0",          # PEP 517 build frontend
    # "twine>=4.0.0",           # Package uploader for PyPI
    # "setuptools>=61.0.0",     # Build system
    # "wheel>=0.40.0",          # Built package format
]

# -----------------------------------------------------------------------------
# LINTING DEPENDENCIES
# -----------------------------------------------------------------------------
# Specialized linting and code quality tools.
#
lint = [
    # "ruff>=0.0.280",          # Fast Python linter (alternative to flake8/pylint)
    # "bandit>=1.7.0",          # Security linter
    # "pydocstyle>=6.3.0",      # Docstring style checker
    # "pylint>=2.17.0",         # Comprehensive linting
]

# =============================================================================
# PROJECT URLs
# =============================================================================
# Links displayed on package repository pages (e.g., PyPI)
#
[project.urls]
"Homepage" = "https://github.com/yourusername/yourproject"
"Bug Tracker" = "https://github.com/yourusername/yourproject/issues"
"Documentation" = "https://yourproject.readthedocs.io"
"Source Code" = "https://github.com/yourusername/yourproject"

# =============================================================================
# TOOL CONFIGURATIONS
# =============================================================================
# Many Python tools can be configured within pyproject.toml

# Example: pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --strict-markers"

# Example: coverage configuration
[tool.coverage.run]
source = ["."]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

# Example: black configuration
[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'

# Example: isort configuration (for import sorting)
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3

# Example: mypy configuration (type checking)
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
